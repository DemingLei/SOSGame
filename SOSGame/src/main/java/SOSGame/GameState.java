package SOSGame;

public abstract class GameState {
    protected BoardSize boardSize;
    protected BoardState boardState;

    public GameState(BoardSize boardSize) {
        this.boardSize = boardSize;
        boardState = new BoardState(boardSize.getSize());
    }

    // Attempts to place a letter in (row, col) and returns the number of SOS formed by this drop

    public int makeMove(int row, int col, String letter, String currentPlayer) {
        if (row < 0 || row >= boardSize.getSize() || col < 0 || col >= boardSize.getSize()) {
            return -1;
        }
        if (!boardState.getCell(row, col).isEmpty()) {
            return -1;
        }
        boardState.setCell(row, col, letter);
        int sosCount = countSOS(row, col, letter);
        updateGameState(row, col, letter, currentPlayer, sosCount);
        return sosCount;
    }

    // Check the eight directions and check if this drop constitutes SOS sequences
    protected int countSOS(int row, int col, String letter) {
        int count = 0;
        int[][] directions = { {-1,0}, {-1,1}, {0,1}, {1,1}, {1,0}, {1,-1}, {0,-1}, {-1,-1} };
        int size = boardSize.getSize();
        for (int[] d : directions) {
            int dx = d[0], dy = d[1];
            if (letter.equals("O")) {
                int x1 = row - dx, y1 = col - dy;
                int x2 = row + dx, y2 = col + dy;
                if (x1 >= 0 && x1 < size && y1 >= 0 && y1 < size &&
                        x2 >= 0 && x2 < size && y2 >= 0 && y2 < size) {
                    if (boardState.getCell(x1, y1).equals("S") &&
                            boardState.getCell(x2, y2).equals("S")) {
                        count++;
                    }
                }
            } else if (letter.equals("S")) {
                // Start S
                int x1 = row + dx, y1 = col + dy;
                int x2 = row + 2 * dx, y2 = col + 2 * dy;
                if (x1 >= 0 && x1 < size && y1 >= 0 && y1 < size &&
                        x2 >= 0 && x2 < size && y2 >= 0 && y2 < size) {
                    if (boardState.getCell(x1, y1).equals("O") &&
                            boardState.getCell(x2, y2).equals("S")) {
                        count++;
                    }
                }
                // End S
                int x_1 = row - dx, y_1 = col - dy;
                int x_2 = row - 2 * dx, y_2 = col - 2 * dy;
                if (x_1 >= 0 && x_1 < size && y_1 >= 0 && y_1 < size &&
                        x_2 >= 0 && x_2 < size && y_2 >= 0 && y_2 < size) {
                    if (boardState.getCell(x_1, y_1).equals("O") &&
                            boardState.getCell(x_2, y_2).equals("S")) {
                        count++;
                    }
                }
            }
        }
        return count;
    }

    // Update game status based on the number of SOS generated by the drop
    protected abstract void updateGameState(int row, int col, String letter, String currentPlayer, int sosCount);

    // Check that if the board is filled
    protected boolean isBoardFull() {
        int size = boardSize.getSize();
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                if (boardState.getCell(i, j).isEmpty()) {
                    return false;
                }
            }
        }
        return true;
    }

    public abstract boolean isGameOver();

    // Returns Blue or Red or Draw
    public abstract String getWinner();

    public String getCell(int row, int col) {
        return boardState.getCell(row, col);
    }
}
